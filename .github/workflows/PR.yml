name: Test

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  build:
    strategy:
      matrix:
        # always use the oldest ubuntu LTS release still available with the github actions
        # this is needed so the build host does not have any libraries installed which are too recent for a successful linking on linux
        # for a log of why this is needed, see: https://github.com/touchlab/SQLiter/pull/38#issuecomment-867171789
        #
        # Windows checks are temporarily disabled until fixed, see: https://github.com/cashapp/sqldelight/issues/2579
        os: [ macOS-latest, ubuntu-18.04 ]
        job: [ instrumentation, test, gradle-plugin-tests, gradle-plugin-integrations ]
        exclude:
          - os: windows-latest
            job: instrumentation
          - os: windows-latest
            job: gradle-plugin-tests
          - os: windows-latest
            job: gradle-plugin-integrations
          - os: macOS-latest
            job: gradle-plugin-integrations

    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Cache gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/**.gradle*', '**/gradle/wrapper/gradle-wrapper.properties', '**/libs.versions.toml') }}
      - name: Set up JDK 11
        uses: actions/setup-java@v3.0.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Run gradle tests
        if: matrix.os == 'ubuntu-18.04' && matrix.job == 'test'
        run: |
          ./gradlew build -x :sqldelight-idea-plugin:build -x :sqldelight-gradle-plugin:test --stacktrace
      - name: Run gradle plugin tests
        if: matrix.os == 'ubuntu-18.04' && matrix.job == 'gradle-plugin-tests'
        run: |
          ./gradlew :sqldelight-gradle-plugin:test --tests="app.cash.sqldelight.tests.*"
          ./gradlew :sqldelight-gradle-plugin:test --tests="app.cash.sqldelight.properties.*"
      - name: Run gradle plugin integrations
        if: matrix.os == 'ubuntu-18.04' && matrix.job == 'gradle-plugin-integrations'
        run: |
          ./gradlew :sqldelight-gradle-plugin:test --tests="app.cash.sqldelight.integrations.*"
          ./gradlew :sqldelight-gradle-plugin:test --tests="app.cash.sqldelight.dialect.*"

      - name: Run the IntelliJ plugin
        if: matrix.os == 'ubuntu-18.04' && matrix.job == 'instrumentation'
        run: ./gradlew :sqldelight-idea-plugin:build --stacktrace
      - name: Verify IntelliJ plugin
        if: matrix.os == 'ubuntu-18.04' && matrix.job == 'instrumentation'
        run: |
          ./gradlew :sqldelight-idea-plugin:runPluginVerifier

      - name: Run windows tests
        if: matrix.os == 'windows-latest'
        run: ./gradlew mingwX64Test sqldelight-idea-plugin:check --stacktrace

      - name: Run linux tests
        if: matrix.os == 'ubuntu-18.04'
        run: ./gradlew linuxTest

      - name: Run instrumentation tests
        if: matrix.os == 'macOS-latest' && matrix.job == 'instrumentation'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck :sqldelight-gradle-plugin:build --stacktrace -PInstrumentation
      - name: Run ios tests
        if: matrix.os == 'macOS-latest' && matrix.job == 'test'
        run: ./gradlew iosX64Test --stacktrace
      - name: Build the sample
        if: matrix.os == 'macOS-latest' && matrix.job == 'gradle-plugin-tests'
        run: |
          cd sample
          ./gradlew build

      - name: Bundle the build report
        if: failure()
        run: find . -type d -name 'reports' | zip -@ -r build-reports.zip
      - name: Upload the build report
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: error-report
          path: build-reports.zip

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.configureondemand=true -Dkotlin.incremental=false -Dorg.gradle.jvmargs="-Xmx8g -Xms4g -XX:MaxPermSize=4096m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -XX:MetaspaceSize=1g"
